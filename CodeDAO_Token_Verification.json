{
  "language": "Solidity",
  "sources": {
    "CodeDAOToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract CodeDAOToken {\n    // State variables\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    \n    // Events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    // Constructor\n    constructor() {\n        name = \"CodeDAO Token\";\n        symbol = \"CODE\";\n        decimals = 18;\n        totalSupply = 100_000_000 * 10**decimals;\n        \n        // Mint initial supply to specified address\n        address initialRecipient = 0x813343d30065eAe9D1Be6521203f5C0874818C28;\n        balanceOf[initialRecipient] = totalSupply;\n        \n        emit Transfer(address(0), initialRecipient, totalSupply);\n    }\n    \n    // Approve spender\n    function approve(address spender, uint256 amount) public returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        \n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n    \n    // Transfer from approved amount\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        require(balanceOf[from] >= amount, \"Insufficient balance\");\n        require(allowance[from][msg.sender] >= amount, \"Insufficient allowance\");\n        \n        balanceOf[from] -= amount;\n        balanceOf[to] += amount;\n        allowance[from][msg.sender] -= amount;\n        \n        emit Transfer(from, to, amount);\n        return true;\n    }\n    \n    // Transfer tokens\n    function transfer(address to, uint256 amount) public returns (bool) {\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n        \n        balanceOf[msg.sender] -= amount;\n        balanceOf[to] += amount;\n        \n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "evmVersion": "paris",
    "viaIR": false,
    "metadata": {
      "bytecodeHash": "bzzr1"
    },
    "outputSelection": {
      ".*": {
        ".*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "metadata"
        ]
      }
    }
  }
} 