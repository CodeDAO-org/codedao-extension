#!/usr/bin/env node

/**
 * CodeDAO Token Deploy - Safe Transaction Builder JSON
 * /token deploy command with Safe Transaction Builder JSON output
 */

const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

// Configuration
const config = {
  repo: 'CodeDAO-org/codedao-token',
  network: 'base',
  safe: '0x813343d30065eAe9D1Be6521203f5C0874818C28',
  confirm_mainnet: 'YES',
  supply: '100000000e18',
  mint_to: '0x813343d30065eAe9D1Be6521203f5C0874818C28',
  verify_on_basescan: true,
  output: 'transaction_builder_json',
  include: ['to', 'value', 'data', 'operation', 'nonce', 'gas']
};

// Contract bytecode for CodeDAO Token
const contractBytecode = "0x608060405234801561001057600080fd5b506040516200115338038062001153833981810160405281019061003491906100f7565b6040518060400160405280600d81526020017f436f646544414f20546f6b656e000000000000000000000000000000000000008152506040518060400160405280600481526020017f434f4445000000000000000000000000000000000000000000000000000000008152508160039081610092919061033a565b5080600490816100a2919061033a565b5050506000811690506100ba81610147565b6100f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e7906104c8565b60405180910390fd5b6100ff816a52b7d2dcc80cd2e4000000610218565b505061058e565b60008151905061010c81610577565b92915050565b60006020828403121561012857610127610572565b5b6000610136848285016100fd565b91505092915050565b600061014a82610155565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1682169050919050565b6000610180600083610298565b915061018b826105a5565b600082019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061020f57601f821691505b602082108103610222576102216101c8565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546102558161020f565b61025f8186610228565b94506001821660008114610278576001811461028d576102c0565b60ff19831686528115158202860193506102c0565b61029685610233565b60005b838110156102b857815481890152600182019150602081019050610299565b838801955050505b50505092915050565b60006102d482610173565b6102de8185610228565b93506102ee8185602086016102f9565b80840191505092915050565b60005b838110156103175780820151818401526020810190506102fc565b60008484015250505050565b600061032f8284610248565b915081905092915050565b600061034682610173565b6103508185610298565b93506103608185602086016102f9565b610369816103a9565b840191505092915050565b600082825260208201905092915050565b600061039082610173565b61039a8185610374565b93506103aa8185602086016102f9565b6103b3816103a9565b840191505092915050565b600060208201905081810360008301526103d88184610385565b905092915050565b60006103eb82610196565b9050919050565b6103fb816103e0565b811461040657600080fd5b50565b600081519050610418816103f2565b92915050565b60006020828403121561043457610433610572565b5b600061044284828501610409565b91505092915050565b7f436f646544414f546f6b656e3a206d696e7420746f207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006104a7602383610374565b91506104b28261044b565b604082019050919050565b600060208201905081810360008301526104d68161049a565b9050919050565b600080fd5b600080fd5b6105058161013f565b811461051057600080fd5b50565b600081519050610522816104fc565b92915050565b60006020828403121561053e5761053d6104dd565b5b600061054c84828501610513565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061059082610196565b915061059b83610196565b92508282039050818111156105b3576105b2610555565b5b92915050565b60006105c482610196565b91506105cf83610196565b92508282019050808211156105e7576105e6610555565b5b92915050565b6105f6816103e0565b811461060157600080fd5b50565b600081519050610613816105ed565b92915050565b60006020828403121561062f5761062e6104dd565b5b600061063d84828501610604565b91505092915050565b610c8f806106556000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b02565b60405180910390f35b6100e660048036038101906100e19190610bbd565b610308565b6040516100f39190610c18565b60405180910390f35b61010461032b565b6040516101119190610c42565b60405180910390f35b610134600480360381019061012f9190610c5d565b610335565b6040516101419190610c18565b60405180910390f35b610152610364565b60405161015f9190610cc6565b60405180910390f35b610182600480360381019061017d9190610bbd565b61036d565b60405161018f9190610c18565b60405180910390f35b6101b260048036038101906101ad9190610ce1565b6103a4565b6040516101bf9190610c42565b60405180910390f35b6101d06103ec565b6040516101dd9190610b02565b60405180910390f35b61020060048036038101906101fb9190610bbd565b61047e565b60405161020d9190610c18565b60405180910390f35b610230600480360381019061022b9190610bbd565b6104f5565b60405161023d9190610c18565b60405180910390f35b610260600480360381019061025b9190610d0e565b610518565b60405161026d9190610c42565b60405180910390f35b60606003805461028590610d7d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d7d565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610770565b6103588585856107fc565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610ddd565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610d7d565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e83565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fc565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610f15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c90610fa7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107639190610c42565b60405180910390a3505050565b600061077c8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f657818110156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611013565b60405180910390fd5b6107f584848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610862906110a5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611137565b60405180910390fd5b6108e5838383610a72565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610962906111c9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a599190610c42565b60405180910390a3610a6c848484610a77565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ab6578082015181840152602081019050610a9b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ade82610a7c565b610ae88185610a87565b9350610af8818560208601610a98565b610b0181610ac2565b840191505092915050565b60006020820190508181036000830152610b268184610ad3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5e82610b33565b9050919050565b610b6e81610b53565b8114610b7957600080fd5b50565b600081359050610b8b81610b65565b92915050565b6000819050919050565b610ba481610b91565b8114610baf57600080fd5b50565b600081359050610bc181610b9b565b92915050565b60008060408385031215610bde57610bdd610b2e565b5b6000610bec85828601610b7c565b9250506020610bfd85828601610bb2565b9150509250929050565b60008115159050919050565b610c1c81610c07565b82525050565b6000602082019050610c376000830184610c13565b92915050565b610c4681610b91565b82525050565b6000602082019050610c616000830184610c3d565b92915050565b600080600060608486031215610c8057610c7f610b2e565b5b6000610c8e86828701610b7c565b9350506020610c9f86828701610b7c565b9250506040610cb086828701610bb2565b9150509250925092565b600060ff82169050919050565b610cd081610cba565b82525050565b6000602082019050610ceb6000830184610cc7565b92915050565b600060208284031215610d0757610d06610b2e565b5b6000610d1584828501610b7c565b91505092915050565b60008060408385031215610d3557610d34610b2e565b5b6000610d4385828601610b7c565b9250506020610d5485828601610b7c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d9557607f821691505b602082108103610da857610da7610d5e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610de882610b91565b9150610df383610b91565b9250828201905080821115610e0b57610e0a610dae565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e6d602583610a87565b9150610e7882610e11565b604082019050919050565b60006020820190508181036000830152610e9c81610e60565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610eff602483610a87565b9150610f0a82610ea3565b604082019050919050565b60006020820190508181036000830152610f2e81610ef2565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610f91602283610a87565b9150610f9c82610f35565b604082019050919050565b60006020820190508181036000830152610fc081610f84565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000610ffd601d83610a87565b915061100882610fc7565b602082019050919050565b6000602082019050818103600083015261102c81610ff0565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061108f602583610a87565b915061109a82611033565b604082019050919050565b600060208201905081810360008301526110be81611082565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611121602383610a87565b915061112c826110c5565b604082019050919050565b6000602082019050818103600083015261115081611114565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111b3602683610a87565b91506111be82611157565b604082019050919050565b600060208201905081810360008301526111e2816111a6565b9050919050565b0000000000000000000000008133343d30065eae9d1be6521203f5c0874818c28";

// ABI for contract creation
const contractABI = [
  "constructor(address _to)"
];

class TokenDeploySafeJSON {
  constructor() {
    this.results = {
      timestamp: new Date().toISOString(),
      config: config,
      safeTransaction: null,
      transactionBuilderJSON: null
    };
  }

  generateContractCalldata() {
    console.log('🔧 Generating contract deployment calldata...');
    
    // Create contract factory
    const factory = new ethers.ContractFactory(contractABI, contractBytecode);
    
    // Generate deployment transaction with constructor argument
    const deployTx = factory.getDeployTransaction(config.mint_to);
    
    console.log(`✅ Contract calldata generated`);
    console.log(`📝 Data length: ${deployTx.data.length} bytes`);
    console.log(`🎯 Constructor arg: ${config.mint_to}`);
    
    return deployTx.data;
  }

  generateSafeTransactionBuilderJSON() {
    console.log('📋 Generating Safe Transaction Builder JSON...');
    
    const calldata = this.generateContractCalldata();
    
    // Safe Transaction Builder format
    const transactionBuilderJSON = {
      version: "1.0",
      chainId: "8453", // Base mainnet
      createdAt: Date.now(),
      meta: {
        name: "CodeDAO Token Deployment",
        description: "Deploy CodeDAO Token (CODE) with 100M supply to Safe",
        txBuilderVersion: "1.16.3",
        createdFromSafeAddress: config.safe,
        createdFromOwnerAddress: "", // Will be filled by Safe UI
        checksum: "" // Will be generated by Safe UI
      },
      transactions: [
        {
          to: "", // Empty for contract creation
          value: "0",
          data: calldata,
          contractMethod: {
            inputs: [
              {
                name: "_to",
                type: "address",
                internalType: "address"
              }
            ],
            name: "constructor",
            payable: false
          },
          contractInputsValues: {
            "_to": config.mint_to
          }
        }
      ]
    };

    this.results.transactionBuilderJSON = transactionBuilderJSON;
    
    console.log('✅ Safe Transaction Builder JSON generated');
    return transactionBuilderJSON;
  }

  async saveTransactionBuilderJSON() {
    console.log('💾 Saving Transaction Builder JSON...');
    
    // Create artifacts directory
    const artifactsDir = path.join(__dirname, 'safe-transaction-artifacts');
    if (!fs.existsSync(artifactsDir)) {
      fs.mkdirSync(artifactsDir, { recursive: true });
    }
    
    // Save Transaction Builder JSON
    const jsonPath = path.join(artifactsDir, 'safe-transaction-builder.json');
    fs.writeFileSync(jsonPath, JSON.stringify(this.results.transactionBuilderJSON, null, 2));
    
    console.log(`📁 JSON saved: ${jsonPath}`);
    return jsonPath;
  }

  async run() {
    console.log('🚀 CodeDAO Token Safe Transaction Builder Starting...\n');
    
    console.log('🚨 MAINNET DEPLOYMENT CONFIRMATION');
    console.log('='.repeat(50));
    console.log(`✅ Mainnet deployment confirmed: ${config.confirm_mainnet}`);
    console.log(`🏦 Safe Address: ${config.safe}`);
    console.log(`🌐 Network: Base Mainnet (Chain ID: 8453)`);
    console.log(`💰 Supply: 100000000.0 CODE`);
    console.log(`🎯 Mint To: ${config.mint_to}`);
    
    try {
      // Generate Safe Transaction Builder JSON
      const transactionBuilderJSON = this.generateSafeTransactionBuilderJSON();
      
      // Save JSON file
      const jsonPath = await this.saveTransactionBuilderJSON();
      
      return {
        jsonPath,
        transactionBuilderJSON,
        config
      };
      
    } catch (error) {
      console.error(`❌ Failed to generate Safe Transaction Builder JSON: ${error.message}`);
      throw error;
    }
  }
}

async function main() {
  const deploySafe = new TokenDeploySafeJSON();
  const result = await deploySafe.run();
  
  console.log('\n📊 SAFE TRANSACTION BUILDER SUMMARY');
  console.log('='.repeat(70));
  console.log(`Safe Address: ${result.config.safe}`);
  console.log(`Network: Base Mainnet (Chain ID: 8453)`);
  console.log(`Token: CodeDAO Token (CODE)`);
  console.log(`Supply: 100000000.0 CODE`);
  console.log(`Mint To: ${result.config.mint_to}`);
  
  console.log('\n📋 TRANSACTION DETAILS');
  console.log('='.repeat(70));
  const tx = result.transactionBuilderJSON.transactions[0];
  console.log(`To: ${tx.to || 'Contract Creation'}`);
  console.log(`Value: ${tx.value} ETH`);
  console.log(`Data Length: ${tx.data.length} bytes`);
  console.log(`Constructor Arg: ${tx.contractInputsValues._to}`);
  
  console.log('\n📁 SAFE TRANSACTION BUILDER JSON');
  console.log('='.repeat(70));
  console.log(`File: ${result.jsonPath}`);
  console.log('\n🔗 IMPORT INSTRUCTIONS');
  console.log('1. Open your Safe → Left sidebar → Apps → Transaction Builder');
  console.log('2. Click "Import" and upload the JSON file');
  console.log('3. Review the transaction details');
  console.log('4. Sign and Execute');
  console.log('5. Copy the "Contract created" address for verification');
  
  console.log('\n📋 JSON CONTENT PREVIEW');
  console.log('='.repeat(70));
  console.log(JSON.stringify(result.transactionBuilderJSON, null, 2));
  
  return result;
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { TokenDeploySafeJSON, main }; 